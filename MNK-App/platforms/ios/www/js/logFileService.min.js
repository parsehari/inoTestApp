var IKMobileLogFile={logFilesAttachment:[],errorHandler:function(e){var o="";switch(e.code){case FileError.QUOTA_EXCEEDED_ERR:o="QUOTA_EXCEEDED_ERR";break;case FileError.NOT_FOUND_ERR:o="NOT_FOUND_ERR",IKMobileLogFile.errorAlert("File not found!");break;case FileError.SECURITY_ERR:o="SECURITY_ERR";break;case FileError.INVALID_MODIFICATION_ERR:o="INVALID_MODIFICATION_ERR";break;case FileError.INVALID_STATE_ERR:o="INVALID_STATE_ERR";break;default:o="Unknown Error",IKMobileLogFile.errorAlert(o)}console.log("Error: "+o)},clearLogFile:function(){window.requestFileSystem(3,0,function(e){e.root.getFile("console.log",{create:!1},function(e){e.createWriter(function(e){e.onwriteend=function(e){console.log("Write completed."),ErrorMessage("Delete Console File","Console Log has been removed!"),console.log("File removed.")},e.onerror=function(e){console.log("Write failed: "+e.toString())};var o=new Blob(["New Log"],{type:"text/plain"});e.write(o)},IKMobileLogFile.errorHandler)},IKMobileLogFile.errorHandler)})},getConsoleLogFile:function(){window.requestFileSystem(LocalFileSystem.PERSISTENT,0,function(e){console.log("we got file system access"),e.root.getFile("console.log",{},function(e){console.log("we got console file"),e.file(function(e){console.log("reading console file into binary");var o=new FileReader;o.onloadend=function(e){IKMobileLogFile.logFilesAttachment.push(e.target.result.replace("data:*/*;base64,","base64:console.log//")),IKMobileLogFile.sendLog(IKMobileLogFile.logFilesAttachment)},o.readAsDataURL(e)},IKMobileLogFile.errorHandler)},IKMobileLogFile.errorHandler)})},getDBFile:function(e){window.requestFileSystem(3,1,function(o){o.root.getFile(e,{},function(o){o.file(function(o){var l=new FileReader;l.onloadend=function(o){IKMobileLogFile.logFilesAttachment.push(o.target.result.replace("data:*/*;base64,","base64:"+e+"//")),IKMobileLogFile.getConsoleLogFile()},l.readAsDataURL(o)},IKMobileLogFile.errorHandler)},IKMobileLogFile.errorHandler)})},getDBFileName:function(){var e=function(o){var l=o.createReader();l.readEntries(function(o){var l,r="";for(l=0;l<o.length;l++)o[l].isDirectory===!0?"Caches"!=o[l].name&&"Cloud"!=o[l].name&&"Cookies"!=o[l].name&&"NoCloud"!=o[l].name&&"Preferences"!=o[l].name&&(console.log(o[l]),e(o[l])):o[l].fullPath.indexOf("/Library/WebKit/LocalStorage/file__0/")!=-1&&".db"==o[l].fullPath.substr(o[l].fullPath.length-3)&&(r=o[l],IKMobileLogFile.getDBFile("/WebKit/LocalStorage/file__0/"+r.name),console.log(r.name))},function(e){console.log("readEntries error: "+e.code+e.error)})};window.resolveLocalFileSystemURL(cordova.file.applicationStorageDirectory,e,this.errorHandler)},sendLog:function(e){cordova.plugins.email.isAvailable(function(o){o?cordova.plugins.email.open({subject:storeObject.loggedInUser.userId+" : "+storeObject.selectedRoutePlanId+" - iKmobile Console.Log & IKMobile.db file",attachments:e,body:"Please find log & DB file attached along with emil below:"},function(e){console.log("email "+(e?"sent":"cancelled"))},this):IKMobileLogFile.errorAlert("Email Account not setup!")})},errorAlert:function(e){navigator.notification.alert(e,function(){},"Error Message")}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

function Result(){this.status=null,this.rows=null,this.errorMessage=null}Result.prototype.constructor=Result,Result.SUCCESS="SUCCESS",Result.FAILURE="FAILURE";var dbQueries={db:null,executeQuery:function(e,t,r){IKMobileDB.db.transaction(function(a){null!=t&&void 0!=t&&"undefined"!=t&&t instanceof Array||(t=[]),a.executeSql(e,t,function(e,t){var a=new Result;a.status=Result.SUCCESS,a.rows=t.rows,r(a)},function(e,t){var a=new Result;a.status=Result.FAILURE,a.errorMessage=t.message,r(a)})})},checkLogin:function(e,t,r){var a="select * from UserDetails where UserId = ? and Password = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:1==e.rows.length?r("True"):0==e.rows.length&&r("False");break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getRoutePlans:function(e,t){var r="select R.RoutePlanId 'routePlanId', R.RoutePlan 'routePlan', R.RouteName 'routeName', R.DriverName 'driverName', R.TruckMobile 'truckMobile', R.Comments 'comments', R.newlyAdded 'newlyAdded' from RoutePlan  R where R.isCompleted != '5' and R.UserId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getRoutePlanHeader:function(e,t,r){var a="Select * from RoutePlan where RoutePlanId= ? and UserId=?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e.rows.item(0));break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getRouteDetails:function(e,t){var r="Select RD.RoutePlanId 'routePlanId', RD.RouteId 'routeId', RD.RoutePlan_Line 'RoutePlan_Line', RD.Route 'route', RD.Location 'location', RD.Name 'name', RD.City 'city', RD.State 'state', RD.OrderNo 'orderNumber', RD.Departure 'departure', RD.Arrival 'arrival', RD.PlannedDeparture 'plannedDeparture', RD.PlannedArrival 'plannedArrival', RD.SpecialInstructions 'specialInstructions', RD.CustomerName 'customerName', RD.CustomerSignature 'customerSignature', RD.newlyAdded 'newlyAdded' From RouteDetails RD where RD.RoutePlanId = ? order by IndexId",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},resetSyncDetails:function(e,t){var r="update SyncDetails set InTransferFlag = '0', ArrDepFlag = '0', LineStatusFlag = '0' where routeId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:console.log("Sync Flag Reset"),t();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateArrivalDate:function(e,t,r){var a="update RouteDetails set Arrival = ?,flag='0' where routeId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}});var n="Update DeliveryPickup set flag='0' where OrderNo = (Select OrderNo from RouteDetails where RouteId=?)",o=[t];this.executeQuery(n,o,function(e){switch(e.status){case Result.SUCCESS:r();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateDepartureDate:function(e,t,r){var a="update RouteDetails set Departure = ?,flag='0',newlyAdded='' where routeId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}});var n="Update DeliveryPickup set newlyAdded='' where flag='0' and OrderNo = (Select OrderNo from RouteDetails where RouteId=?)",o=[t];this.executeQuery(n,o,function(e){switch(e.status){case Result.SUCCESS:r();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},saveOdoMeterStartReading:function(e,t,r){var a="update RoutePlan set OdometerStartReading = ?, IsCompleted='4', flag='0',newlyAdded='' where RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},saveOdoMeterEndReading:function(e,t,r){var a="update RoutePlan set OdometerEndReading = ?, IsCompleted='5', flag='0' where RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getItemDetails:function(e,t,r){var a="select * from DeliveryPickup ID, Inventory IM where ID.ItemId = IM.ItemId and ID.OrderNo = ? and ID.Type = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:for(var t=[],a=0;a<e.rows.length;a++)t.push(e.rows.item(a));r(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventory:function(e,t,r,a){var s="";"serial"==e?s="select * from Inventory where SerialNo = ? and InventoryType = 'T' and RoutePlanId = ?":"batch"==e?s="select * from Inventory where BatchNo = ? and InventoryType = 'T' and RoutePlanId = ?":"material"==e?s="select * from Inventory where Item = ? and InventoryType = 'T' and RoutePlanId = ?":alert("Error :: DB Queries :: getItemMaster function");var n=[t,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:if(e.rows.length>0){for(var t=[],r=0;r<e.rows.length;r++)t.push(e.rows.item(r));a(t)}else a(null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getPickupInventory:function(e,t,r,a){var s="";"serial"==e?s="select * from Inventory where SerialNo = ? and InventoryType = 'C' and RoutePlanId = ?":alert("Error :: DB Queries :: getItemMaster function");var n=[t,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:if(e.rows.length>0){for(var t=[],r=0;r<e.rows.length;r++)t.push(e.rows.item(r));a(t)}else a(null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateItemDetails:function(e,t,r,a){var s="update DeliveryPickup set ConfirmedQty = ? where OrderNo = ? and ItemId = ?",n=[r,e,t];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},saveItemDetails:function(e,t){var r="INSERT INTO DeliveryPickup ( OrderNo, ItemId, Item, Description, ExpectedQty, ConfirmedQty, Type, IsAdded, flag, LineNo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, (Select max(LineNo)+10 from DeliveryPickup where OrderNo=?))",a=[e.orderNo,e.itemId,e.item,e.description,"0",e.qty,e.type,"TRUE","0",e.orderNo];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryDetails:function(e,t){var r="SELECT Item, Description, (TotalQuantity- (CASE WHEN ConfirmedQty IS NULL THEN 0 ELSE ConfirmedQty END) ) 'TotalQuantity' , (ExpectedQty-(CASE WHEN QTY IS NULL THEN 0 ELSE QTY END)) 'CommitedQty' FROM ( SELECT Item, Description, SUM(CommitedQuantity) 'TotalQuantity' FROM Inventory WHERE RoutePlanId = ? AND InventoryType = 'T' GROUP BY Item, Description ) LEFT JOIN ( select Item 'Item1', Description 'Description1', SUM(ConfirmedQty) 'ConfirmedQty', SUM(ExpectedQty) 'ExpectedQty', SUM(QTY) 'QTY' FROM ( SELECT Item, Description, ConfirmedQty, ExpectedQty, ExpectedQty 'QTY' FROM DeliveryPickup WHERE OrderNo IN ( SELECT OrderNo FROM RouteDetails WHERE RoutePlanId = ? and OrderNo IS NOT NULL and Route != 'UHS' and ((Departure is not null AND Departure != '' and Arrival is not null AND Arrival != '') OR CustomerSignature IS NOT NULL)) AND Type != 'X' union all SELECT Item, Description, ConfirmedQty, 0 'ExpectedQty', 0 'QTY' FROM DeliveryPickup WHERE OrderNo IN ( SELECT OrderNo FROM RouteDetails WHERE RoutePlanId = ? and OrderNo IS NOT NULL and Route = 'UHS' and ((Departure is not null AND Departure != '' and Arrival is not null AND Arrival != '') OR CustomerSignature IS NOT NULL)) AND Type != 'X' union all SELECT Item, Description,ConfirmedQty,ExpectedQty, CASE WHEN ConfirmedQty>ExpectedQty THEN ExpectedQty ELSE ConfirmedQty END AS QTY FROM DeliveryPickup WHERE OrderNo NOT IN ( SELECT OrderNo FROM RouteDetails WHERE RoutePlanId = ? and OrderNo IS NOT NULL and (((Departure is not null AND Departure != '' and Arrival is not null AND Arrival != '') OR CustomerSignature IS NOT NULL) OR Route = 'UHS') UNION SELECT OrderNo FROM RouteDetails WHERE RoutePlanId != ?) AND Type != 'X' union all SELECT Item, Description,ConfirmedQty,0 'ExpectedQty', 0 'QTY' FROM DeliveryPickup WHERE OrderNo NOT IN ( SELECT OrderNo FROM RouteDetails WHERE RoutePlanId = ? and OrderNo IS NOT NULL and (((Departure is not null AND Departure != '' and Arrival is not null AND Arrival != '') OR CustomerSignature IS NOT NULL) OR Route != 'UHS') UNION SELECT OrderNo FROM RouteDetails WHERE RoutePlanId != ?) AND Type != 'X' ) GROUP BY Item, Description ) ON Item = Item1",a=[e,e,e,e,e,e,e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryTabDetails:function(e,t){var r="Select * from(SELECT SUM(CommitedQuantity) 'CommitedQuantity', Item 'Item1', Description 'Description1' FROM Inventory where InventoryType = 'T' and RoutePlanId = ? group by Item, Description)LEFT JOIN(SELECT SUM(ExpectedQty) 'ExpectedQty' , SUM(ConfirmedQty) 'ConfirmedQty', Item , Description FROM DeliveryPickup where Type != 'X' and OrderNo IN (SELECT distinct OrderNo FROM RouteDetails where (OrderNo is not null and OrderNo != '') and RoutePlanId = ?) group by Item , Description)ON Item1 = Item",a=[e,e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updatePickupDeliveryItem:function(e,t,r,a){var s="update DeliveryPickup set ConfirmedQty = null where ItemId = ? and OrderNo = ? and Type = ?",n=[e,t,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:var t=e.rows.length;a(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getReviewDetails:function(e,t,r,a){var s="";s="Pickup"==t?"SELECT Item, Description, SerialNo, BatchNo, Hours, TotalQuantity FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'C'UNION ALL Select Item1 'Item', Description1 'Description',SerialNo, BatchNo, Hours1 'Hours', ConfirmedQty from (SELECT Item 'Item1', Description 'Description1', Hours 'Hours1', Sum(ConfirmedQty) 'ConfirmedQty' FROM DeliveryPickup where Type = 'X' and OrderNo=? and Item NOT IN(SELECT distinct Item FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'C') group by Item , Description having SUM(ConfirmedQty) > 0) LEFT JOIN Inventory ON Inventory.Item = Item1 and Inventory.InventoryType = 'C' and Inventory.RoutePlanId = ?":"SELECT Item, Description, SerialNo, BatchNo, Hours, TotalQuantity 'Quantity' FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'T'UNION ALL Select Item1 'Item', Description1 'Description',SerialNo, BatchNo, Hours1 'Hours', ConfirmedQty 'Quantity' from (SELECT Item 'Item1', Description 'Description1', Hours 'Hours1', Sum(ConfirmedQty) 'ConfirmedQty' FROM DeliveryPickup where Type != 'X' and OrderNo=? and Item NOT IN(SELECT distinct Item FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'T') group by Item , Description having SUM(ConfirmedQty) > 0) LEFT JOIN Inventory ON Inventory.Item = Item1 and Inventory.InventoryType = 'T' and Inventory.RoutePlanId = ?";var n=[e,r,e,e,r,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:for(var t=[],r=0;r<e.rows.length;r++)t.push(e.rows.item(r));a(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateSignature:function(e,t,r,a,s){var n="update RouteDetails set CustomerSignature = ?, CustomerName = ? where RoutePlanId = ? and OrderNo = ?",o=[e,t,r,a];this.executeQuery(n,o,function(e){switch(e.status){case Result.SUCCESS:var t=e.rows.length;s(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getOpenRoutePlansByUser:function(e,t){var r="SELECT * FROM RoutePlan WHERE UserId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},setRouteDetailsToDefault:function(e,t){var r=" UPDATE RouteDetails SET Departure = '', Arrival = '', CustomerName ='', CustomerSignature = '' WHERE RoutePlanId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteIsAddedRowsByRoutePlanId:function(e,t){var r="DELETE FROM DeliveryPickup WHERE IsAdded = 'TRUE' AND OrderNo IN (Select OrderNo from RouteDetails where RoutePlanId = ?)",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},setItemDetailsToDefault:function(e,t){var r=" UPDATE DeliveryPickup SET ConfirmedQty = '0' WHERE OrderNo IN (Select OrderNo from RouteDetails where RoutePlanId = ?)",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},setRoutePlanToDefault:function(e,t){var r=" UPDATE RoutePlan SET OdometerStartReading = null, OdometerEndReading = null WHERE UserId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateConfirmedQtyToNull:function(e,t){var r="update DeliveryPickup set ConfirmedQty = '0'  where OrderNo = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteAddedRows:function(e,t){var r="delete from DeliveryPickup Where IsAdded = 'TRUE' and OrderNo = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateArrivalToNullByRouteID:function(e,t){var r="update RouteDetails set Arrival = '' where RouteID = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getPickupDetails:function(e,t){var r="SELECT SUM(ExpectedQty) 'ExpectedQty' , SUM(ConfirmedQty) 'ConfirmedQty', Item, Description FROM DeliveryPickup where Type = 'X' and OrderNo=? group by Item , Description",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getDeliveryDetails:function(e,t){var r="SELECT SUM(ExpectedQty) 'ExpectedQty' , SUM(ConfirmedQty) 'ConfirmedQty', Item, Description FROM DeliveryPickup where Type != 'X' and OrderNo=? group by Item , Description",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getDeliveryItem:function(e,t,r){var a="select * from DeliveryPickup where OrderNo = ? and Item = ? and Type != 'X'",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e.rows.length>0?e.rows.item(0):null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getPickupItem:function(e,t,r){var a="select * from (select * from DeliveryPickup where Type = 'X' and OrderNo = ? and Item = ?) left join (select Sum(ExpectedQty) 'ExpectedQty1', Sum(ConfirmedQty) 'ConfirmedQty1' , Item 'Item1', OrderNo 'OrderNo1' FROM DeliveryPickup WHere Type = 'X' and OrderNo = ? and Item = ? group by Item, OrderNo) on Item = Item1 and OrderNo =OrderNo1",s=[e,t,e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e.rows.length>0?e.rows.item(0):null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateConfirmedQtyForDelivery:function(e,t,r,a){var s="update DeliveryPickup set ConfirmedQty = ? where OrderNo = ? and Item = ? and Type != 'X'",n=[e,t,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateConfirmedQtyForPickup:function(e,t,r,a){var s="update DeliveryPickup set ConfirmedQty = ?, Hours = ? where ItemId = ? and Type = 'X'",n=[e,t,r];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateTotalQtyForDelivery:function(e,t,r,a,s){var n="update Inventory set TotalQuantity = ?, OrderNo = ?, LineNo=?, flag='0' where ItemId = ? and InventoryType = 'T'",o=[e,t,a,r];this.executeQuery(n,o,function(e){switch(e.status){case Result.SUCCESS:s(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateTotalQtyForPickup:function(e,t,r,a,s,n){var o="update Inventory set TotalQuantity = ?, OrderNo = ? , LineNo=? , Hours = ?, flag='0' where ItemId = ? and InventoryType = 'C'",u=[e,t,s,r,a];this.executeQuery(o,u,function(e){switch(e.status){case Result.SUCCESS:n(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},insertDeliveryData:function(e,t){var r="INSERT INTO DeliveryPickup ( OrderNo, ItemId, Item, Description, ExpectedQty, ConfirmedQty, Type, IsAdded, flag, LineNo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, (Select max(LineNo)+10 from DeliveryPickup where OrderNo=?))",a=[e.orderNo,e.itemId,e.item,e.itemDesc,"0",e.confirmedQty,"","TRUE","0",e.orderNo];this.executeQuery(r,a,function(r){switch(r.status){case Result.SUCCESS:dbQueries.getLineNo(e.orderNo,e.itemId,function(e){t(e)});break;case Result.FAILURE:alert("Err :: "+r.errorMessage)}})},insertPickupData:function(e,t){dbQueries.getPickupItem(e.orderNo,e.item,function(r){if(r)dbQueries.updateConfirmedQtyForPickup(r.ConfirmedQty1+1,e.hours,r.ItemId,function(){t(r.LineNo)});else{var a="INSERT INTO DeliveryPickup ( OrderNo, ItemId, Item, ExpectedQty, ConfirmedQty, Type, IsAdded, Hours, flag, LineNo, Description) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, (Select max(LineNo)+10 from DeliveryPickup where OrderNo=?), (SELECT Description FROM Inventory WHERE Item = ? LIMIT 1))",s=[e.orderNo,e.itemId,e.item,"0",e.confirmedQty,"X","TRUE",e.hours,"0",e.orderNo,e.item];dbQueries.executeQuery(a,s,function(r){switch(r.status){case Result.SUCCESS:dbQueries.getLineNo(e.orderNo,e.itemId,function(e){t(e)});break;case Result.FAILURE:alert("Err :: "+r.errorMessage)}})}})},getDeliveryPickupItem:function(e,t,r){var a="select * from DeliveryPickup where OrderNo = ? and Item = ? and Type = 'X'",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e.rows.length>0?e.rows.item(0):"");break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateSyncFlag:function(e,t,r,a,s,n){var o="INSERT OR REPLACE INTO SyncDetails (RoutePlanId, RouteId, Route, OrderNo, HeaderStatusFlag, InTransferFlag, ArrDepFlag, LineStatusFlag) VALUES(?, ?, (Select Route from RouteDetails where RouteId= ?), (Select OrderNo from RouteDetails where RouteId= ?), '"+r+"', '"+a+"', '"+s+"', '"+n+"')",u=[e,t,t,t];this.executeQuery(o,u,function(e){switch(e.status){case Result.SUCCESS:console.log("Location Detail Added in SyncDetails");break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateFlag:function(e){this.executeQuery(e,[],function(e){switch(e.status){case Result.SUCCESS:console.log("Flag Updated");break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateDeliveryPickupItemPickup:function(e,t,r){var a="update DeliveryPickup set ConfirmedQty = ?, Hours = '' where ItemId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteDeliveryPickupItemPickup:function(e,t){var r="delete from DeliveryPickup where ItemId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateInventoryForPickup:function(e,t,r,a){var s="update Inventory set TotalQuantity = ?,flag='0' where Item = ? and InventoryType = 'C' and RoutePlanId = ?",n=[r,t,e];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryForPickup:function(e,t,r){var a="select * from Inventory where Item = ? and InventoryType = 'C' and RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:e.rows.length>0&&r(e.rows.item(0));break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateInventoryForPickupSerial:function(e,t,r,a){var s="update Inventory set TotalQuantity = ?, OrderNo = null, Hours = null, flag='0' where SerialNo = ? and InventoryType = 'C' and RoutePlanId = ?",n=[r,t,e];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryForPickupSerial:function(e,t,r){var a="select * from Inventory where SerialNo = ? and InventoryType = 'C' and RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:e.rows.length>0&&r(e.rows.item(0));break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateDeliveryPickupItemDelivery:function(e,t,r){var a="update DeliveryPickup set ConfirmedQty = ?, Hours = '' where ItemId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteDeliveryPickupItemDelivery:function(e,t){var r="delete from DeliveryPickup where ItemId = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryForDeliverySerial:function(e,t,r){var a="select * from Inventory where SerialNo = ? and InventoryType = 'T' and RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:e.rows.length>0&&r(e.rows.item(0));break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateInventoryForDeliverySerial:function(e,t,r,a){var s="update Inventory set TotalQuantity = ?, OrderNo = null, Hours = null, flag='0' where SerialNo = ? and InventoryType = 'T' and RoutePlanId = ?",n=[r,t,e];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInventoryForDelivery:function(e,t,r){var a="select * from Inventory where Item = ? and InventoryType = 'T' and RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:e.rows.length>0&&r(e.rows.item(0));break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateInventoryForDelivery:function(e,t,r,a){var s="update Inventory set TotalQuantity = ?, flag='0' where Item = ? and InventoryType = 'T' and RoutePlanId = ?",n=[r,t,e];this.executeQuery(s,n,function(e){switch(e.status){case Result.SUCCESS:a(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getBatchMaterialManagedRecords:function(e,t,r){var a="Select Item1 'Item', Description1 'Description',SerialNo, BatchNo, Hours1 'Hours', ConfirmedQty from (SELECT Item 'Item1', Description 'Description1', Hours 'Hours1', ConfirmedQty  FROM DeliveryPickup where Type != 'X' and OrderNo=? and Item NOT IN(SELECT distinct Item FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'T') group by Item , Description having SUM(ConfirmedQty) > 0) LEFT JOIN Inventory ON Inventory.Item = Item1 and Inventory.InventoryType = 'T' and Inventory.RoutePlanId = ?",s=[e,e,t,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:for(var t=[],a=0;a<e.rows.length;a++)t.push(e.rows.item(a));r(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},updateInventorySerials:function(e,t,r){var a="update Inventory set TotalQuantity = 0, OrderNo = null, Hours = null, flag='0' where OrderNo = ? and RoutePlanId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteInventoryAddedRows:function(e,t,r){var a="delete from Inventory where OrderNo = ? and RoutePlanId = ? and ItemId = SerialNo",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getPickupComments:function(e,t){var r="Select * from DeliveryPickup where OrderNo = ? and Type = 'X'",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:for(var r=[],a=0;a<e.rows.length;a++)r.push(e.rows.item(a));t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInTransferDataForPickup:function(e,t,r){var a="SELECT Item, Description, SerialNo, BatchNo, Hours, TotalQuantity, LineNo, UOM FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'C'UNION ALL Select Item1 'Item', Description1 'Description',SerialNo, BatchNo, Hours1 'Hours', ConfirmedQty, LineNo, UOM from (SELECT Item 'Item1', Description 'Description1', Hours 'Hours1', Sum(ConfirmedQty) 'ConfirmedQty' FROM DeliveryPickup where Type = 'X' and OrderNo=? and Item NOT IN(SELECT distinct Item FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'C') group by Item , Description having SUM(ConfirmedQty) > 0) LEFT JOIN Inventory ON Inventory.Item = Item1 and Inventory.InventoryType = 'C' and Inventory.RoutePlanId = ?";console.log(a),console.log(t),console.log(e);var s=[t,e,t,t,e,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:for(var t=[],a=0;a<e.rows.length;a++){var s=e.rows.item(a);s.DLPU="PU",t.push(s)}console.log("Pickup List: "+t),r(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInTransferDataForDelivery:function(e,t,r){var a="SELECT Item, Description, SerialNo, BatchNo, Hours, TotalQuantity, LineNo, UOM FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'T'UNION ALL Select Item1 'Item', Description1 'Description',SerialNo, BatchNo, Hours1 'Hours', ConfirmedQty, LineNo, UOM from (SELECT Item 'Item1', Description 'Description1', Hours 'Hours1', Sum(ConfirmedQty) 'ConfirmedQty' FROM DeliveryPickup where Type != 'X' and OrderNo=? and Item NOT IN(SELECT distinct Item FROM Inventory WHERE OrderNo = ? and RoutePlanId = ? and InventoryType = 'T') group by Item , Description having SUM(ConfirmedQty) > 0) LEFT JOIN Inventory ON Inventory.Item = Item1 and Inventory.InventoryType = 'T' and Inventory.RoutePlanId = ?",s=[t,e,t,t,e,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:for(var t=[],a=0;a<e.rows.length;a++){var s=e.rows.item(a);s.DLPU="DL",t.push(s)}console.log("Delivery List: "+t),r(t);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},getInTransferData:function(e,t,r){dbQueries.getInTransferDataForPickup(e,t,function(a){dbQueries.getInTransferDataForDelivery(e,t,function(e){if(a||(a=[]),e)for(var t=0;t<e.length;t++)a.push(e[t]);console.log(a),r(a)})})},getArrDepData:function(e,t){var r="Select RP.OdometerStartReading, RP.OdometerEndReading,  RD.RoutePlanId, RD.RouteId, RD.RoutePlan_Line, RD.Route, RD.Location, RD.OrderNo, RD.Departure,RD.Arrival,RD.CustomerName,RD.CustomerSignature from RoutePlan as RP join RouteDetails as RD where RD.RouteId=? and RP.RoutePlanId=RD.RoutePlanId",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:var r=[];r.push(e.rows.item(0)),t(r);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},syncAppData:function(e){var t,r,a,s="Select * from SyncDetails where HeaderStatusFlag LIKE '0%' OR InTransferFlag='0' OR ArrDepFlag='0' OR LineStatusFlag LIKE '0%' order by RoutePlanId,RouteId";this.executeQuery(s,[],function(s){function n(u){t=u.HeaderStatusFlag,r=u.ArrDepFlag,a=u.LineStatusFlag,InTFlag=u.InTransferFlag,dbQueries.getArrDepData(u.RouteId,function(i){dbQueries.updateHD(t,i,function(){dbQueries.updateTF(InTFlag,i,u,function(){dbQueries.updateAD(r,i,function(){dbQueries.updateLS(a,i,function(){o++,o<s.rows.length?n(s.rows.item(o)):e()})})})})})}switch(s.status){case Result.SUCCESS:var o=0;s.rows.length>0?n(s.rows.item(o)):e();break;case Result.FAILURE:$("#popupLoaderSyncApp").popup("close"),alert("Err :: "+s.errorMessage)}})},updateHD:function(e,t,r){if("0"==e||"00"==e){var a="00"==e?"5":"4";SapData.updateRoutePlanHeaderStatus(t,a,function(){r()})}else r()},updateTF:function(e,t,r,a){"0"==e?dbQueries.getInTransferData(t[0].RoutePlanId,t[0].OrderNo,function(e){console.log(e),SapData.updateInTransfer(t[0].CustomerName,t[0].CustomerSignature,t[0].RoutePlan_Line,t[0].OrderNo,e,function(){a()})}):a()},updateAD:function(e,t,r){"0"==e?SapData.updateArrivalDeparture(t,function(){r()}):r()},updateLS:function(e,t,r){if("0"==e||"00"==e){var a="00"==e?"4":"5";SapData.updateRoutePlanLineStatus(t,a,function(){r()})}else r()},getDeliveryItemBySerial:function(e,t){var r="select * from Inventory where SerialNo = ? and  InventoryType = 'T'",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e.rows.length>0?e.rows.item(0):null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},checkForDelete:function(e,t){var r="Select * from SyncDetails where HeaderStatusFlag = '1' AND InTransferFlag='X' AND ArrDepFlag='1' AND LineStatusFlag = '1' AND Route = 'RSC' AND RoutePlanId=?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(2==e.rows.length?"true":"false");break;case Result.FAILURE:$("#popupLoaderSyncApp").popup("close"),alert("Err :: "+e.errorMessage)}})},deleteRoute:function(e){function t(t){setTimeout(function(){console.log(t+" for "+e+" DELETED")},500)}function r(t){console.log(t+" for "+e+" DELETED"),localStorage.removeItem(storeObject.selectedRoutePlanId+"DepDate"),localStorage.removeItem(storeObject.selectedRoutePlanId+"Odometer"),$("#popupLoaderSyncApp").popup("close"),ikMobile.displaySelectRouteView()}function a(e){}var s="delete from Inventory where RoutePlanId='"+e+"' and InventoryType='C'",n="delete from DeliveryPickup where OrderNo IN (Select OrderNo from RouteDetails where RoutePlanId='"+e+"')",o="delete from RouteDetails where RoutePlanId='"+e+"'",u="delete from RoutePlan where RoutePlanId='"+e+"'",i="delete from SyncDetails where RoutePlanId='"+e+"'";IKMobileDB.db.transaction(function(e){e.executeSql(s,t("Inventory"),a),e.executeSql(n,t("Delivery Pickup Items"),a),e.executeSql(o,t("Route Details"),a),e.executeSql(u,t("Route Plan"),a),e.executeSql(i,r("Sync Details"),a)})},getLineNo:function(e,t,r){var a="select LineNo from DeliveryPickup where OrderNo = ? and ItemId = ?",s=[e,t];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r(e.rows.length>0?e.rows.item(0).LineNo:null);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},isCylinder:function(e,t){var r="select * from Cylinders where ItemNo = ?",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e.rows.length>0?!0:!1);break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},insertInventoryForPickup:function(e,t){var r="insert into Inventory (RoutePlanId, ItemId, Item, CommitedQuantity, TotalQuantity, BatchNo, SerialNo, InventoryType, OrderNo, LineNo, Hours, flag, Location, Description) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, (SELECT Description FROM Inventory WHERE Item = ? and (Description is not null) LIMIT 1))",a=[e.RoutePlanId,e.ItemId,e.Item,e.CommitedQuantity,e.TotalQuantity,e.BatchNo,e.SerialNo,e.InventoryType,e.OrderNo,e.LineNo,e.Hours,e.flag,e.Location,e.Item];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t();break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteInventoryForPickupSerial:function(e,t,r){var a="delete from Inventory where SerialNo = ? and InventoryType = 'C' and RoutePlanId = ?",s=[t,e];this.executeQuery(a,s,function(e){switch(e.status){case Result.SUCCESS:r();break;case Result.FAILURE:
alert("Err :: "+e.errorMessage)}})},getLastUpdatedDate:function(e){var t="select lastsync from synclog where tablename = 'Inventory'",r=[];this.executeQuery(t,r,function(t){switch(t.status){case Result.SUCCESS:if(t.rows.length>0){var r=t.rows.item(0).lastsync,a=r.substr(0,4),s=r.substr(5,2),n=r.substr(8,2),o=r.substr(11,2),u=r.substr(14,2),i="";o>12?(o-=12,i="PM"):12==o?i="PM":(0==o&&(o=12),i="AM"),e(s+"/"+n+"/"+a+" "+o+":"+u+" "+i)}else e("-/-/- -:-");break;case Result.FAILURE:alert("Err :: "+t.errorMessage)}})},checkUpdate:function(e,t){var r="Select newlyAdded from DeliveryPickup where OrderNo=? and newlyAdded='Yes'",a=[e];this.executeQuery(r,a,function(e){switch(e.status){case Result.SUCCESS:t(e.rows.length>0?"Yes":"No");break;case Result.FAILURE:alert("Err :: "+e.errorMessage)}})},deleteSyncDetails:function(){var e=arguments,t="Delete from SyncDetails where RouteId=?";for(var r in e){var a=[arguments[r]];console.log(a),this.executeQuery(t,a,function(e){})}}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

var SapData={CallDataService:function(e,t){var a=new XMLHttpRequest;a.open("GET",e,!0),console.log(e+"::"+storeObject.auth+"::"+storeObject.oDataTimeOut),a.setRequestHeader("Authorization",storeObject.auth),a.timeout=storeObject.oDataTimeOut,a.onreadystatechange=function(){4==a.readyState&&(200==a.status?t(a.responseXML,!0):501!=a.status&&500!=a.status&&404!=a.status&&403!=a.status&&400!=a.status&&0!=a.status||t(a.responseXML,!1))},a.send()},CheckLogin:function(e,t,a){var n=oLogin+"(IPassword='"+encodeURIComponent(t)+"',IUser='"+encodeURIComponent(e)+"')";SapData.CallDataService(n,function(t,n){n?"Login Success"==t.getElementsByTagName("d:EMessage")[0].textContent?(console.log("LOGIN SUCCESS"),localStorage.setItem("UserId",e),a("Success")):(console.log("LOGIN FAILED"),localStorage.removeItem("UserId",e),a("Failure")):SapData.NetworkError()})},loadRoutePlan:function(e,t){var a=[];SapData.CallDataService(oRoutePlan+"'"+e+"'",function(n,o){if(o){var r=n.getElementsByTagName("entry");"NO_ROUTE_ASSIGNED"!=r[0].getElementsByTagName("d:MESSAGE")[0].textContent?IKMobileDB.db.transaction(function(n){for(var o="INSERT OR IGNORE INTO RoutePlan ( RoutePlanId, RoutePlan, UserId, IsCompleted, flag) VALUES (?, ?, ?, ?, ?)",l=0;l<r.length;l++){var s=[r[l].getElementsByTagName("d:ROUTEPLAN")[0].textContent,r[l].getElementsByTagName("d:ROUTEPLAN")[0].textContent,r[l].getElementsByTagName("d:USER")[0].textContent,r[l].getElementsByTagName("d:STATUS")[0].textContent,""];n.executeSql(o,s),a[l]=r[l].getElementsByTagName("d:ROUTEPLAN")[0].textContent}var d="Update RoutePlan set newlyAdded='Yes' where flag='' and RoutePlanId NOT IN (Select RoutePlanId from RoutePlanBackup)";n.executeSql(d,[],function(){},function(){}),console.log("Data Inserted into RoutePlan Table");for(var i=0;i<a.length;i++)i==a.length-1?SapData.loadRouteDetails(e,a[i],"1",function(e){SapData.loadDeliveryPickup(e,"1",function(e){SapData.loadInventory(e,"1",t)})}):SapData.loadRouteDetails(e,a[i],"0",function(e){SapData.loadDeliveryPickup(e,"0",function(e){SapData.loadInventory(e,"0",t)})})}):($("#loginpopup").popup("close"),setTimeout(function(){$("#popupOverlayNoRoutePlanAssigned").popup("open")},500),setTimeout(function(){$("#popupOverlayNoRoutePlanAssigned").popup("close")},2500),localStorage.removeItem("UserId"))}})},loadRouteDetails:function(e,t,a,n){var o=oRouteDetails+"'"+e+"' and ROUTEPLAN eq '"+t+"'";SapData.CallDataService(o,function(e,o){if(o){var r=e.getElementsByTagName("entry")[0].getElementsByTagName("entry");IKMobileDB.db.transaction(function(o){var l="INSERT OR IGNORE INTO RouteDetails ( IndexId, RoutePlanId, RouteId, RoutePlan_Line, Route, Location, Name, City, State, OrderNo, PlannedArrival, PlannedDeparture, Arrival, Departure,flag) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",s=[0,t,t+"_0",r[0].getElementsByTagName("d:ROUTEPLAN_LINE")[0].textContent,r[0].getElementsByTagName("d:STOPDESC")[0].textContent,r[0].getElementsByTagName("d:LOCATION")[0].textContent,r[0].getElementsByTagName("d:LOCATION_DESC")[0].textContent,r[0].getElementsByTagName("d:CITY")[0].textContent,r[0].getElementsByTagName("d:REGION")[0].textContent,r[0].getElementsByTagName("d:ORDER")[0].textContent,"-",dateFormat(r[0].getElementsByTagName("d:SCHDEP")[0].textContent),"","",""];o.executeSql(l,s);for(var d=1;d<r.length;d++){var s=[d,t,t+"_"+d,r[d].getElementsByTagName("d:ROUTEPLAN_LINE")[0].textContent,r[d].getElementsByTagName("d:STOPDESC")[0].textContent,r[d].getElementsByTagName("d:LOCATION")[0].textContent,r[d].getElementsByTagName("d:LOCATION_DESC")[0].textContent,r[d].getElementsByTagName("d:CITY")[0].textContent,r[d].getElementsByTagName("d:REGION")[0].textContent,r[d].getElementsByTagName("d:ORDER")[0].textContent,dateFormat(r[d].getElementsByTagName("d:SCHARV")[0].textContent),dateFormat(r[d].getElementsByTagName("d:SCHDEP")[0].textContent),"","",""];o.executeSql(l,s)}var s=[r.length,t,t+"_"+r.length,r[0].getElementsByTagName("d:ROUTEPLAN_LINE")[0].textContent,r[0].getElementsByTagName("d:STOPDESC")[0].textContent,r[0].getElementsByTagName("d:LOCATION")[0].textContent,r[0].getElementsByTagName("d:LOCATION_DESC")[0].textContent,r[0].getElementsByTagName("d:CITY")[0].textContent,r[0].getElementsByTagName("d:REGION")[0].textContent,r[0].getElementsByTagName("d:ORDER")[0].textContent,dateFormat(r[0].getElementsByTagName("d:SCHARV")[0].textContent),"-","","",""];o.executeSql(l,s);var i="UPDATE RoutePlan set RouteName=?, Comments=?, DriverName=?, TruckMobile=? where RoutePlanId=?",u=e.getElementsByTagName("d:COMMENTS")[0].textContent.split("<>").join("<br>");if(o.executeSql(i,[e.getElementsByTagName("d:ROUTEPLAN_TEXT")[0].textContent,u,e.getElementsByTagName("d:DRIVER")[0].textContent,e.getElementsByTagName("d:TELF")[0].textContent,t]),"1"==a){var c="update RouteDetails set newlyAdded='Yes' where flag='' and Location NOT IN (Select Location from RouteDetailsBackup) and RoutePlanId NOT IN (Select RoutePlanId from RoutePlan where newlyAdded='Yes')";o.executeSql(c,[],function(){},function(){}),console.log("Data Inserted into RouteDetails Table"),console.log("RoutePlan Table Updated"),IKMobileDB.baseDataSyncLog("RoutePlan"),IKMobileDB.baseDataSyncLog("RouteDetails")}n(t)})}else"1"==a&&(IKMobileDB.db.transaction(function(e){var t="update RouteDetails set newlyAdded='Yes' where flag='' and Location NOT IN (Select Location from RouteDetailsBackup) and RoutePlanId NOT IN (Select RoutePlanId from RoutePlan where newlyAdded='Yes')";e.executeSql(t,[],function(){},function(){})}),console.log("Data Inserted into RouteDetails Table"),console.log("RoutePlan Table Updated"),IKMobileDB.baseDataSyncLog("RoutePlan"),IKMobileDB.baseDataSyncLog("RouteDetails")),n(t)})},loadDeliveryPickup:function(e,t,a){var n=oDeliveryPickup+"'"+e+"'&$expand=Stopitm";SapData.CallDataService(n,function(n,o){if(o){var r=n.getElementsByTagName("feed")[0].getElementsByTagName("feed"),l=n.getElementsByTagName("feed")[0];IKMobileDB.db.transaction(function(n){for(var o="INSERT OR IGNORE INTO DeliveryPickup ( OrderNo, LineNo, ItemId, Item, Description, MaterialGrp, MaterialDesc, ExpectedQty, ConfirmedQty, Type, PickupComments) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",s="UPDATE RouteDetails set SpecialInstructions=? where RoutePlanId=? and OrderNo=? and flag=''",d=0;d<r.length;d++){for(var i=r[d].getElementsByTagName("entry"),u=0;u<i.length;u++){var c=[i[u].getElementsByTagName("d:ORDER")[0].textContent,i[u].getElementsByTagName("d:ITEM_NUM")[0].textContent,i[u].getElementsByTagName("d:ORDER")[0].textContent+"_"+u,i[u].getElementsByTagName("d:MATERIAL")[0].textContent,i[u].getElementsByTagName("d:MATDESC")[0].textContent,i[u].getElementsByTagName("d:MATGROUP")[0].textContent,i[u].getElementsByTagName("d:MATGRPDES")[0].textContent,i[u].getElementsByTagName("d:QUANTITY")[0].textContent,i[u].getElementsByTagName("d:CONF_QUAN")[0].textContent,i[u].getElementsByTagName("d:FLAG")[0].textContent,i[u].getElementsByTagName("d:SERIAL")[0].textContent];n.executeSql(o,c)}n.executeSql(s,[l.getElementsByTagName("d:DELV_TXT")[d].textContent+" "+l.getElementsByTagName("d:HDR_TXT")[d].textContent,e,i[0].getElementsByTagName("d:ORDER")[0].textContent])}var m="Update DeliveryPickup set newlyAdded='Yes' where flag is null and NOT EXISTS (select OrderNo,LineNo from DeliveryPickupBackup where DeliveryPickup.OrderNo=DeliveryPickupBackup.OrderNo and DeliveryPickup.LineNo=DeliveryPickupBackup.LineNo) and OrderNo NOT IN (Select RD.OrderNo from RouteDetails as RD join RoutePlan as RP on RD.RoutePlanId=RP.RoutePlanId where RP.newlyAdded='Yes' and RD.OrderNo!='')";n.executeSql(m,[],function(){var t="update RouteDetails set newlyAdded='Yes' where RoutePlanId='"+e+"' and OrderNo is not null and OrderNo IN (Select OrderNo from DeliveryPickup where newlyAdded='Yes' group by OrderNo)";n.executeSql(t,[],function(){},function(){})},function(){}),"1"==t&&(console.log("Data Inserted into DeliveryPickup Table"),IKMobileDB.baseDataSyncLog("DeliveryPickup")),a(e)})}else"1"==t&&(IKMobileDB.db.transaction(function(t){var a="Update DeliveryPickup set newlyAdded='Yes' where flag is null and NOT EXISTS (select OrderNo,LineNo from DeliveryPickupBackup where DeliveryPickup.OrderNo=DeliveryPickupBackup.OrderNo and DeliveryPickup.LineNo=DeliveryPickupBackup.LineNo) and OrderNo NOT IN (Select RD.OrderNo from RouteDetails as RD join RoutePlan as RP on RD.RoutePlanId=RP.RoutePlanId where RP.newlyAdded='Yes' and RD.OrderNo!='')";t.executeSql(a,[],function(){var a="update RouteDetails set newlyAdded='Yes' where RoutePlanId='"+e+"' and OrderNo is not null and OrderNo IN (Select OrderNo from DeliveryPickup where newlyAdded='Yes' group by OrderNo)";t.executeSql(a,[],function(){},function(){})},function(){})}),console.log("Data Inserted into DeliveryPickup Table"),IKMobileDB.baseDataSyncLog("DeliveryPickup")),a(e)})},loadInventory:function(e,t,a){var n=oInventory+"'"+e+"'";SapData.CallDataService(n,function(e,n){if(n){var o=e.getElementsByTagName("entry");IKMobileDB.db.transaction(function(e){for(var n="INSERT OR IGNORE INTO Inventory ( RoutePlanId, ItemId, Item, Description, CommitedQuantity, TotalQuantity, UOM, BatchNo, SerialNo, InventoryType, Location) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",r=0;r<o.length;r++){var l=[o[r].getElementsByTagName("d:ROUTEPLAN")[0].textContent,o[r].getElementsByTagName("d:ROUTEPLAN")[0].textContent+"_"+r,o[r].getElementsByTagName("d:MATERIAL")[0].textContent,o[r].getElementsByTagName("d:MATDESC")[0].textContent,o[r].getElementsByTagName("d:QUANTITY")[0].textContent,o[r].getElementsByTagName("d:CONF_QUAN")[0].textContent,o[r].getElementsByTagName("d:UOM")[0].textContent,o[r].getElementsByTagName("d:BATCH_NUM")[0].textContent,o[r].getElementsByTagName("d:SERIAL")[0].textContent,o[r].getElementsByTagName("d:FLAG")[0].textContent,o[r].getElementsByTagName("d:LOCATION")[0].textContent];e.executeSql(n,l)}"1"==t&&(console.log("Data Inserted into Inventory Table"),IKMobileDB.baseDataSyncLog("Inventory"),a())})}else"1"==t&&(console.log("Data Inserted into Inventory Table"),IKMobileDB.baseDataSyncLog("Inventory"),a())})},getCSRFToken:function(e){var t=new XMLHttpRequest;t.open("GET",oInTransfer,!0),t.setRequestHeader("Authorization",storeObject.auth),t.setRequestHeader("X-CSRF-Token","Fetch"),t.timeout=storeObject.oDataTimeOut,t.onreadystatechange=function(){if(4==t.readyState){var a=t.getResponseHeader("x-csrf-token");storeObject.CSRKey=a,console.log("found CSRf key :"+storeObject.CSRKey),e()}},t.send()},updateRoutePlanHeaderStatus:function(e,t,a){console.log("Started updateRoutePlanHeaderStatus"),SapData.getCSRFToken(function(){var n=new XMLHttpRequest;n.open("PUT",oUpdateRoutePlan+"('"+e[0].RoutePlanId+"')",!0),n.setRequestHeader("Content-Type","application/atom+xml"),n.setRequestHeader("Authorization",storeObject.auth),n.setRequestHeader("X-CSRF-Token",storeObject.CSRKey),n.setRequestHeader("Accept","application/atom+xml,application/atomsvc+xml,application/xml"),n.timeout=storeObject.oDataTimeOut,n.onreadystatechange=function(){4==n.readyState&&(200==n.status||201==n.status||204==n.status?(console.log("Route Plan Header Status Updated"),dbQueries.updateFlag("Update SyncDetails set HeaderStatusFlag='1' where RouteId='"+e[0].RouteId+"'"),a()):(console.log("End with Error updateRoutePlanHeaderStatus"),SapData.UpdateError(n.status+" : End with Error updateRoutePlanHeaderStatus")))};var o='<?xml version="1.0" encoding="utf-8"?><atom:entry xmlns:atom ="http://www.w3.org/2005/Atom" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xml:base="'+oRoutePlanSrv+'"><atom:content type="application/xml"><m:properties><d:ROUTEPLAN>'+e[0].RoutePlanId+"</d:ROUTEPLAN><d:ROUTEPLAN_LINE></d:ROUTEPLAN_LINE><d:ROUTEPLAN_STAT>"+t+"</d:ROUTEPLAN_STAT><d:START_ODO>"+e[0].OdometerStartReading+"</d:START_ODO><d:END_ODO>"+(e[0].OdometerEndReading?e[0].OdometerEndReading:"0")+"</d:END_ODO><d:HEADER>X</d:HEADER></m:properties></atom:content></atom:entry>";n.send(o)})},updateRoutePlanLineStatus:function(e,t,a){console.log("Started updateRoutePlanLineStatus"),SapData.getCSRFToken(function(){var n=new XMLHttpRequest;n.open("PUT",oUpdateRoutePlan+"('"+e[0].RoutePlanId+"')",!0),n.setRequestHeader("Content-Type","application/atom+xml"),n.setRequestHeader("Authorization",storeObject.auth),n.setRequestHeader("X-CSRF-Token",storeObject.CSRKey),n.setRequestHeader("Accept","application/atom+xml,application/atomsvc+xml,application/xml"),n.timeout=storeObject.oDataTimeOut,n.onreadystatechange=function(){4==n.readyState&&(200==n.status||201==n.status||204==n.status?(console.log("Route Plan Line Status Updated"),dbQueries.updateFlag("Update SyncDetails set LineStatusFlag='1' where RouteId='"+e[0].RouteId+"'"),a()):(console.log("End with Error updateRoutePlanLineStatus"),SapData.UpdateError(n.status+" : End with Error updateRoutePlanLineStatus"),dbQueries.updateFlag("Update SyncDetails set LineStatusFlag='0' where RouteId='"+e[0].RouteId+"'")))};var o='<?xml version="1.0" encoding="UTF-8"?><atom:entry xmlns:atom="http://www.w3.org/2005/Atom" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xml:base="'+oRoutePlanSrv+'"><atom:content type="application/xml"><m:properties><d:ROUTEPLAN>'+e[0].RoutePlanId+"</d:ROUTEPLAN><d:ROUTEPLAN_LINE>"+e[0].RoutePlan_Line+"</d:ROUTEPLAN_LINE><d:ROUTEPLAN_STAT>"+t+"</d:ROUTEPLAN_STAT><d:HEADER /></m:properties></atom:content></atom:entry>";n.send(o)})},updateArrivalDeparture:function(e,t){console.log("Started updateArrivalDeparture"),SapData.getCSRFToken(function(){var a=new XMLHttpRequest;a.open("PUT",oUpdateArrivalDeparture+"(ROUTEPLAN='"+e[0].RoutePlanId+"',ROUTEPLAN_LINE='"+e[0].RoutePlan_Line+"')",!0),a.setRequestHeader("Content-Type","application/atom+xml"),a.setRequestHeader("Authorization",storeObject.auth),a.setRequestHeader("X-CSRF-Token",storeObject.CSRKey),a.setRequestHeader("Accept","application/atom+xml,application/atomsvc+xml,application/xml"),a.timeout=storeObject.oDataTimeOut,a.onreadystatechange=function(){4==a.readyState&&(console.log("Arrival/Departure Request Status:: "+a.status),200==a.status||201==a.status||204==a.status?(xmlDoc=a.responseXML,console.log("Arrival Departure Updated"),dbQueries.updateFlag("Update SyncDetails set ArrDepFlag='1' where RouteId='"+e[0].RouteId+"'"),t()):(console.log("End with Error updateArrivalDeparture"),SapData.UpdateError(a.status+" : End with Error updateArrivalDeparture"),dbQueries.updateFlag("Update SyncDetails set ArrDepFlag='0' where RouteId='"+e[0].RouteId+"'")))};var n='<?xml version="1.0" encoding="UTF-8"?><atom:entry xmlns:atom="http://www.w3.org/2005/Atom" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xml:base="'+oRoutePlanSrv+'"><atom:content type="application/atom+xml"><m:properties><d:ROUTEPLAN>'+e[0].RoutePlanId+"</d:ROUTEPLAN><d:ROUTEPLAN_LINE>"+e[0].RoutePlan_Line+"</d:ROUTEPLAN_LINE><d:DOCUMENT_NUMB /><d:ENTRY_NUMB></d:ENTRY_NUMB><d:CUSTOMER_NUMB>"+e[0].Location+"</d:CUSTOMER_NUMB><d:UPDTD>0</d:UPDTD><d:ACTARVDT>"+sendDate(e[0].Arrival)+"</d:ACTARVDT><d:ACTARVTM>"+sendTime(e[0].Arrival)+"</d:ACTARVTM><d:ACTDEPDT>"+sendDate(e[0].Departure)+"</d:ACTDEPDT><d:ACTDEPTM>"+sendTime(e[0].Departure)+"</d:ACTDEPTM><d:MESSAGE /><d:FLAG>X</d:FLAG></m:properties></atom:content></atom:entry>";a.send(n)})},updateInTransfer:function(e,t,a,n,o,r){console.log("Start updateInTransfer"),SapData.getCSRFToken(function(){for(var l='<?xml version="1.0" encoding="utf-8"?><atom:entry xmlns:atom ="http://www.w3.org/2005/Atom" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xml:base="'+oRoutePlanSrv+'"><atom:content type="application/xml"><m:properties><d:PRINT_NAME>'+e+"</d:PRINT_NAME><d:SIGNATURE>"+t+'</d:SIGNATURE></m:properties></atom:content><atom:link rel="http://schemas.microsoft.com/ado/2007/08/dataservices/related/Intrnsfr_is" type="application/atom+xml;type=feed" title="ZMNK_MOBITOR_ROUTEPLANS_SRV.Intrnsfr_h_Intrnsfr_i"><m:inline><atom:feed>',s=0;s<o.length;s++)console.log(o[s].LineNo),lineNoFix=o[s].LineNo,"null"==lineNoFix&&(lineNoFix="0000"),l+='<atom:entry><atom:content type="application/xml"><m:properties><d:DOCUMENT_NUMB>'+o[s].DLPU+"</d:DOCUMENT_NUMB><d:LINE_NUMB>"+lineNoFix+"</d:LINE_NUMB><d:ENTRY_NUMB /><d:SERIAL_NUMB>"+(o[s].SerialNo?o[s].SerialNo:"")+"</d:SERIAL_NUMB><d:ITEM_NUMB>"+o[s].Item+"</d:ITEM_NUMB><d:QUANTITY>"+o[s].TotalQuantity+"</d:QUANTITY><d:UNIT>"+(o[s].UOM?o[s].UOM:"EA")+"</d:UNIT><d:DIST_OR_NUMB>"+n+"</d:DIST_OR_NUMB><d:LOT_NUMB>"+(o[s].BatchNo?o[s].BatchNo:"")+"</d:LOT_NUMB><d:PROCESSED>1</d:PROCESSED><d:HOURS>"+(o[s].Hours?o[s].Hours:"")+"</d:HOURS><d:ROUTE_NUMB>"+storeObject.selectedRoutePlanId+"</d:ROUTE_NUMB><d:ROUTEPLAN_LINE>"+a+"</d:ROUTEPLAN_LINE></m:properties></atom:content></atom:entry>";l+="</atom:feed></m:inline></atom:link></atom:entry>";var d=new XMLHttpRequest;d.open("POST",oInTransfer,!0),d.setRequestHeader("Access-Control-Allow-Origin","*"),d.setRequestHeader("Content-length",l.length),d.setRequestHeader("Content-Type","application/atom+xml"),d.setRequestHeader("Authorization",storeObject.auth),d.setRequestHeader("X-CSRF-Token",storeObject.CSRKey),d.setRequestHeader("Accept","application/atom+xml,application/atomsvc+xml,application/xml"),d.timeout=storeObject.oDataTimeOut,d.onreadystatechange=function(){console.log("Ready Status :"+d.readyState),console.log("Request Status :"+d.status),console.log("request URL:"+oInTransfer),console.log("response:"+d.responseXML),4==d.readyState&&(200==d.status||201==d.status||204==d.status?(console.log(oInTransfer),console.log("InTransfer Updated"),dbQueries.updateFlag("Update SyncDetails set InTransferFlag='1' where OrderNo='"+n+"'"),r()):(d.status>=400||0==d.status)&&(console.log("End with Error updateInTransfer"),console.log("Failed Value:"),console.log(l),SapData.UpdateError(d.status+" : End with Error updateInTransfer")))},d.send(l)})},NetworkError:function(){$("#loginpopup").popup("close"),navigator.notification.alert("Network Down! \n Please try later",function(){},"Error")},UpdateError:function(e){$("#popupLoaderSyncApp").popup("close"),navigator.notification.alert("Unable to Sync Data!\nData will be synced as soon as we receive connection",function(){},e)},loginError:function(){navigator.notification.alert("Invalid Username or Password",function(){},"Login Error"),navigator.notification.beep(1),$("#loginpopup").bind("popupafterclose",function(){$("#loginpopup").unbind("popupafterclose"),$("#popupDialogEmptyLogin").popup("open"),$("#loginErrorMsg").html("Invalid Username or Password!")}),$("#loginpopup").popup("close")}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
